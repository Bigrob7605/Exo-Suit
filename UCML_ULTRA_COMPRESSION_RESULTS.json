{
  "timestamp": "2025-08-18T21:36:28.092993+00:00",
  "original_performance": {
    "short": {
      "size": 54,
      "unique_chars": 19,
      "total_chars": 54,
      "compression_ratio": 2.5714285714285716,
      "entropy": 3.8154605400671637
    },
    "medium": {
      "size": 192,
      "unique_chars": 25,
      "total_chars": 192,
      "compression_ratio": 7.111111111111111,
      "entropy": 4.134753612738761
    },
    "long": {
      "size": 386,
      "unique_chars": 32,
      "total_chars": 386,
      "compression_ratio": 11.352941176470589,
      "entropy": 4.221778205015125
    },
    "code": {
      "size": 157,
      "unique_chars": 30,
      "total_chars": 157,
      "compression_ratio": 4.90625,
      "entropy": 4.138364841658078
    },
    "technical": {
      "size": 351,
      "unique_chars": 33,
      "total_chars": 351,
      "compression_ratio": 10.028571428571428,
      "entropy": 4.340494222501874
    }
  },
  "ultra_compressed_performance": {
    "short": {
      "best_algorithm": "arithmetic",
      "compression_ratio": 13.5,
      "compressed_size": 4,
      "savings": 50,
      "all_algorithms": {
        "huffman": {
          "compression_ratio": 1.0,
          "compressed_data": "b'This is a short test message for compression analysis.'",
          "savings": 0
        },
        "run_length": {
          "compression_ratio": 1.0,
          "compressed_data": "b'This is a short test message for compression analysis.'",
          "savings": 0,
          "compressed_string": "This is a short test message for compression analysis."
        },
        "dictionary": {
          "compression_ratio": 0.9152542372881356,
          "compressed_data": "b'This <3,3>a short test message for compr<16,3>ion analysis.'",
          "savings": -5,
          "compressed_string": "This <3,3>a short test message for compr<16,3>ion analysis."
        },
        "bwt": {
          "compression_ratio": 0.9818181818181818,
          "compressed_data": "b'snrestat.s$ sn  gmrt aTss hsa ooacifhmopoiiis syeeesr l'",
          "savings": -1
        },
        "arithmetic": {
          "compression_ratio": 13.5,
          "compressed_data": "b'\\x00\\x19\\x9a\\x9d'",
          "savings": 50,
          "encoded_value": 0.0003906854612455325,
          "prob_ranges": {
            "T": [
              0.0,
              0.018518518518518517
            ],
            "h": [
              0.018518518518518517,
              0.05555555555555555
            ],
            "i": [
              0.05555555555555555,
              0.12962962962962962
            ],
            "s": [
              0.12962962962962962,
              0.31481481481481477
            ],
            " ": [
              0.31481481481481477,
              0.4629629629629629
            ],
            "a": [
              0.4629629629629629,
              0.537037037037037
            ],
            "o": [
              0.537037037037037,
              0.611111111111111
            ],
            "r": [
              0.611111111111111,
              0.6666666666666666
            ],
            "t": [
              0.6666666666666666,
              0.7222222222222222
            ],
            "e": [
              0.7222222222222222,
              0.7962962962962963
            ],
            "m": [
              0.7962962962962963,
              0.8333333333333333
            ],
            "g": [
              0.8333333333333333,
              0.8518518518518517
            ],
            "f": [
              0.8518518518518517,
              0.8703703703703702
            ],
            "c": [
              0.8703703703703702,
              0.8888888888888887
            ],
            "p": [
              0.8888888888888887,
              0.9074074074074072
            ],
            "n": [
              0.9074074074074072,
              0.9444444444444442
            ],
            "l": [
              0.9444444444444442,
              0.9629629629629627
            ],
            "y": [
              0.9629629629629627,
              0.9814814814814812
            ],
            ".": [
              0.9814814814814812,
              0.9999999999999997
            ]
          }
        }
      }
    },
    "medium": {
      "best_algorithm": "arithmetic",
      "compression_ratio": 48.0,
      "compressed_size": 4,
      "savings": 188,
      "all_algorithms": {
        "huffman": {
          "compression_ratio": 1.0,
          "compressed_data": "b'This is a medium-length test message that contains more content for compression analysis. It includes various patterns and repetitions that should benefit from advanced compression algorithms.'",
          "savings": 0
        },
        "run_length": {
          "compression_ratio": 1.0,
          "compressed_data": "b'This is a medium-length test message that contains more content for compression analysis. It includes various patterns and repetitions that should benefit from advanced compression algorithms.'",
          "savings": 0,
          "compressed_string": "This is a medium-length test message that contains more content for compression analysis. It includes various patterns and repetitions that should benefit from advanced compression algorithms."
        },
        "dictionary": {
          "compression_ratio": 0.927536231884058,
          "compressed_data": "b'This <3,3>a medium-length test<19,3>ssage that contains more<14,5>ent for<26,3>mpr<43,3>ion analysis. It includes various patter<68,3>and repetit<54,3>s<98,6>should benefi<91,3>rom advanced<101,14>lgorithms.'",
          "savings": -15,
          "compressed_string": "This <3,3>a medium-length test<19,3>ssage that contains more<14,5>ent for<26,3>mpr<43,3>ion analysis. It includes various patter<68,3>and repetit<54,3>s<98,6>should benefi<91,3>rom advanced<101,14>lgorithms."
        },
        "bwt": {
          "compression_ratio": 0.9948186528497409,
          "compressed_data": "b'.smnnsddrtetttsatssdthess.mss $  st n v vhhp nn    lenueargcmnbltrtdmrrtpe  alntttTts asstr hsfrtdu-acaou   oohooaaiaeerioeoorcciiiccfmghi emmoo ppaoefininuneims ssyeeeeaniIsannt g  iiealoiod l'",
          "savings": -1
        },
        "arithmetic": {
          "compression_ratio": 48.0,
          "compressed_data": "b'\\x00\\x02Au'",
          "savings": 188,
          "encoded_value": 3.441918870042133e-05,
          "prob_ranges": {
            "T": [
              0.0,
              0.005208333333333333
            ],
            "h": [
              0.005208333333333333,
              0.036458333333333336
            ],
            "i": [
              0.036458333333333336,
              0.10416666666666666
            ],
            "s": [
              0.10416666666666666,
              0.19791666666666666
            ],
            " ": [
              0.19791666666666666,
              0.328125
            ],
            "a": [
              0.328125,
              0.3958333333333333
            ],
            "m": [
              0.3958333333333333,
              0.4375
            ],
            "e": [
              0.4375,
              0.5208333333333334
            ],
            "d": [
              0.5208333333333334,
              0.5520833333333334
            ],
            "u": [
              0.5520833333333334,
              0.5729166666666667
            ],
            "-": [
              0.5729166666666667,
              0.5781250000000001
            ],
            "l": [
              0.5781250000000001,
              0.6041666666666667
            ],
            "n": [
              0.6041666666666667,
              0.6770833333333334
            ],
            "g": [
              0.6770833333333334,
              0.6927083333333334
            ],
            "t": [
              0.6927083333333334,
              0.78125
            ],
            "c": [
              0.78125,
              0.8125
            ],
            "o": [
              0.8125,
              0.8802083333333334
            ],
            "r": [
              0.8802083333333334,
              0.9270833333333334
            ],
            "f": [
              0.9270833333333334,
              0.9427083333333334
            ],
            "p": [
              0.9427083333333334,
              0.9635416666666667
            ],
            "y": [
              0.9635416666666667,
              0.9687500000000001
            ],
            ".": [
              0.9687500000000001,
              0.9791666666666667
            ],
            "I": [
              0.9791666666666667,
              0.9843750000000001
            ],
            "v": [
              0.9843750000000001,
              0.9947916666666667
            ],
            "b": [
              0.9947916666666667,
              1.0
            ]
          }
        }
      }
    },
    "long": {
      "best_algorithm": "arithmetic",
      "compression_ratio": 96.5,
      "compressed_size": 4,
      "savings": 382,
      "all_algorithms": {
        "huffman": {
          "compression_ratio": 1.0,
          "compressed_data": "b'This is a much longer test message designed to test the advanced compression capabilities of the UCML system. It contains multiple paragraphs with various patterns, repetitions, and semantic structures that should demonstrate the power of quantum pattern recognition, neural network compression, and fractal compression algorithms working together to achieve massive compression ratios.'",
          "savings": 0
        },
        "run_length": {
          "compression_ratio": 1.0,
          "compressed_data": "b'This is a much longer test message designed to test the advanced compression capabilities of the UCML system. It contains multiple paragraphs with various patterns, repetitions, and semantic structures that should demonstrate the power of quantum pattern recognition, neural network compression, and fractal compression algorithms working together to achieve massive compression ratios.'",
          "savings": 0,
          "compressed_string": "This is a much longer test message designed to test the advanced compression capabilities of the UCML system. It contains multiple paragraphs with various patterns, repetitions, and semantic structures that should demonstrate the power of quantum pattern recognition, neural network compression, and fractal compression algorithms working together to achieve massive compression ratios."
        },
        "dictionary": {
          "compression_ratio": 0.8265524625267666,
          "compressed_data": "b'This <3,3>a much longer test message designed to<25,6>the advanc<21,3>compr<42,3>ion capabilities of<41,5>UCML system. It<48,3>ntains<112,3>ltiple paragraphs with various<24,3>tterns, repet<86,3>o<13,4>and semantic structu<129,3><150,3>at should<179,3>m<44,3>trate<174,5>pow<214,3><146,3>qu<56,3>um<92,8><90,3>cogn<91,5>, neural<7,3>twork<218,12><118,6>fract<33,3><243,12>algor<182,3>m<189,3><53,3>ing<295,3>ge<291,3><326,3>o achieve ma<290,3><8,3><302,12><158,3>ios.'",
          "savings": -81,
          "compressed_string": "This <3,3>a much longer test message designed to<25,6>the advanc<21,3>compr<42,3>ion capabilities of<41,5>UCML system. It<48,3>ntains<112,3>ltiple paragraphs with various<24,3>tterns, repet<86,3>o<13,4>and semantic structu<129,3><150,3>at should<179,3>m<44,3>trate<174,5>pow<214,3><146,3>qu<56,3>um<92,8><90,3>cogn<91,5>, neural<7,3>twork<218,12><118,6>fract<33,3><243,12>algor<182,3>m<189,3><53,3>ing<295,3>ge<291,3><326,3>o achieve ma<290,3><8,3><302,12><158,3>ios."
        },
        "bwt": {
          "compression_ratio": 0.9974160206718347,
          "compressed_data": "b'.esoen,,nldektdedshetasl,rsemsefnn,dtcLrosfterdghss.nsnsmsU MC$  p r srttr v  mucrpvmhrrppai nuae     auelnne  ahhvgvlhtrcntsdrwghttirdmrrrrttgpnnioo nanoiolacttttttcTtsptthsbkasssstttrt hwrlntsrraaupai uuee  eooooh  ooorooaaag  iogiorooaatt  tccccciiiiilimcgwwihipa   eai mmmm eeefaugt   uppppaoooeetiineuehmnnos  essssseeeeeaeeyn  Isasncastt  i    einiiiale   ssaanceqmromtetod ieo t s'",
          "savings": -1
        },
        "arithmetic": {
          "compression_ratio": 96.5,
          "compressed_data": "b'\\x00\\x00\\xa7q'",
          "savings": 382,
          "encoded_value": 9.980495258464833e-06,
          "prob_ranges": {
            "T": [
              0.0,
              0.0025906735751295338
            ],
            "h": [
              0.0025906735751295338,
              0.03367875647668394
            ],
            "i": [
              0.03367875647668394,
              0.09585492227979275
            ],
            "s": [
              0.09585492227979275,
              0.17875647668393785
            ],
            " ": [
              0.17875647668393785,
              0.31088082901554404
            ],
            "a": [
              0.31088082901554404,
              0.37823834196891193
            ],
            "m": [
              0.37823834196891193,
              0.4119170984455959
            ],
            "u": [
              0.4119170984455959,
              0.43523316062176165
            ],
            "c": [
              0.43523316062176165,
              0.4689119170984456
            ],
            "l": [
              0.4689119170984456,
              0.4896373056994819
            ],
            "o": [
              0.4896373056994819,
              0.5569948186528497
            ],
            "n": [
              0.5569948186528497,
              0.6139896373056994
            ],
            "g": [
              0.6139896373056994,
              0.6347150259067357
            ],
            "e": [
              0.6347150259067357,
              0.7253886010362693
            ],
            "r": [
              0.7253886010362693,
              0.7849740932642486
            ],
            "t": [
              0.7849740932642486,
              0.8782383419689118
            ],
            "d": [
              0.8782383419689118,
              0.898963730569948
            ],
            "v": [
              0.898963730569948,
              0.9093264248704662
            ],
            "p": [
              0.9093264248704662,
              0.9404145077720206
            ],
            "b": [
              0.9404145077720206,
              0.9430051813471502
            ],
            "f": [
              0.9430051813471502,
              0.9507772020725388
            ],
            "U": [
              0.9507772020725388,
              0.9533678756476683
            ],
            "C": [
              0.9533678756476683,
              0.9559585492227979
            ],
            "M": [
              0.9559585492227979,
              0.9585492227979274
            ],
            "L": [
              0.9585492227979274,
              0.961139896373057
            ],
            "y": [
              0.961139896373057,
              0.9637305699481865
            ],
            ".": [
              0.9637305699481865,
              0.9689119170984456
            ],
            "I": [
              0.9689119170984456,
              0.9715025906735751
            ],
            "w": [
              0.9715025906735751,
              0.9818652849740933
            ],
            ",": [
              0.9818652849740933,
              0.9922279792746115
            ],
            "q": [
              0.9922279792746115,
              0.994818652849741
            ],
            "k": [
              0.994818652849741,
              1.0
            ]
          }
        }
      }
    },
    "code": {
      "best_algorithm": "arithmetic",
      "compression_ratio": 39.25,
      "compressed_size": 4,
      "savings": 153,
      "all_algorithms": {
        "huffman": {
          "compression_ratio": 1.0,
          "compressed_data": "b'def fibonacci(n):\\n    if n <= 1:\\n        return n\\n    return fibonacci(n-1) + fibonacci(n-2)\\n\\n# Test the function\\nfor i in range(10):\\n    print(fibonacci(i))'",
          "savings": 0
        },
        "run_length": {
          "compression_ratio": 1.026143790849673,
          "compressed_data": "b'def fibonacci(n):\\n<4 >if n <= 1:\\n<8 >return n\\n<4 >return fibonacci(n-1) + fibonacci(n-2)\\n\\n# Test the function\\nfor i in range(10):\\n<4 >print(fibonacci(i))'",
          "savings": 4,
          "compressed_string": "def fibonacci(n):\n<4 >if n <= 1:\n<8 >return n\n<4 >return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function\nfor i in range(10):\n<4 >print(fibonacci(i))"
        },
        "dictionary": {
          "compression_ratio": 1.0680272108843538,
          "compressed_data": "b'def fibonacci(n):\\n    if n <= 1<15,6><19,4>return n<32,5><13,7><57,11>-1) +<17,13>2)\\n\\n# Test the function\\nfor i in range(10<116,7>print(<140,10>i))'",
          "savings": 10,
          "compressed_string": "def fibonacci(n):\n    if n <= 1<15,6><19,4>return n<32,5><13,7><57,11>-1) +<17,13>2)\n\n# Test the function\nfor i in range(10<116,7>print(<140,10>i))"
        },
        "bwt": {
          "compression_ratio": 0.9936708860759493,
          "compressed_data": "b'):::n\\nn\\n   \\n\\n\\n         )=n#fn+er inf n  t\\n)etiiii21)in0 nn1-( -1)) < nnnnriiiiaaaaccccn$hgdTrrei(   \\n nt cccc(ffff  rt o rri(((oooouaiibbbbf o   puuesn ceeftt'",
          "savings": -1
        },
        "arithmetic": {
          "compression_ratio": 39.25,
          "compressed_data": "b'\\x00\\x03uk'",
          "savings": 153,
          "encoded_value": 5.2775169289182074e-05,
          "prob_ranges": {
            "d": [
              0.0,
              0.006369426751592357
            ],
            "e": [
              0.006369426751592357,
              0.044585987261146494
            ],
            "f": [
              0.044585987261146494,
              0.09554140127388536
            ],
            " ": [
              0.09554140127388536,
              0.3121019108280255
            ],
            "i": [
              0.3121019108280255,
              0.4012738853503185
            ],
            "b": [
              0.4012738853503185,
              0.4267515923566879
            ],
            "o": [
              0.4267515923566879,
              0.46496815286624205
            ],
            "n": [
              0.46496815286624205,
              0.5668789808917197
            ],
            "a": [
              0.5668789808917197,
              0.5987261146496815
            ],
            "c": [
              0.5987261146496815,
              0.6560509554140127
            ],
            "(": [
              0.6560509554140127,
              0.6942675159235668
            ],
            ")": [
              0.6942675159235668,
              0.732484076433121
            ],
            ":": [
              0.732484076433121,
              0.751592356687898
            ],
            "\n": [
              0.751592356687898,
              0.7961783439490445
            ],
            "<": [
              0.7961783439490445,
              0.8025477707006369
            ],
            "=": [
              0.8025477707006369,
              0.8089171974522292
            ],
            "1": [
              0.8089171974522292,
              0.8280254777070063
            ],
            "r": [
              0.8280254777070063,
              0.8726114649681528
            ],
            "t": [
              0.8726114649681528,
              0.9108280254777069
            ],
            "u": [
              0.9108280254777069,
              0.929936305732484
            ],
            "-": [
              0.929936305732484,
              0.9426751592356687
            ],
            "+": [
              0.9426751592356687,
              0.949044585987261
            ],
            "2": [
              0.949044585987261,
              0.9554140127388534
            ],
            "#": [
              0.9554140127388534,
              0.9617834394904458
            ],
            "T": [
              0.9617834394904458,
              0.9681528662420381
            ],
            "s": [
              0.9681528662420381,
              0.9745222929936305
            ],
            "h": [
              0.9745222929936305,
              0.9808917197452228
            ],
            "g": [
              0.9808917197452228,
              0.9872611464968152
            ],
            "0": [
              0.9872611464968152,
              0.9936305732484075
            ],
            "p": [
              0.9936305732484075,
              0.9999999999999999
            ]
          }
        }
      }
    },
    "technical": {
      "best_algorithm": "arithmetic",
      "compression_ratio": 87.75,
      "compressed_size": 4,
      "savings": 347,
      "all_algorithms": {
        "huffman": {
          "compression_ratio": 1.0,
          "compressed_data": "b'The UCML compression system utilizes advanced algorithms including quantum-inspired pattern recognition, neural network-based compression, and fractal compression techniques. These algorithms work in concert to achieve unprecedented compression ratios by identifying repetitive patterns, semantic clusters, and self-similar structures within the data.'",
          "savings": 0
        },
        "run_length": {
          "compression_ratio": 1.0,
          "compressed_data": "b'The UCML compression system utilizes advanced algorithms including quantum-inspired pattern recognition, neural network-based compression, and fractal compression techniques. These algorithms work in concert to achieve unprecedented compression ratios by identifying repetitive patterns, semantic clusters, and self-similar structures within the data.'",
          "savings": 0,
          "compressed_string": "The UCML compression system utilizes advanced algorithms including quantum-inspired pattern recognition, neural network-based compression, and fractal compression techniques. These algorithms work in concert to achieve unprecedented compression ratios by identifying repetitive patterns, semantic clusters, and self-similar structures within the data."
        },
        "dictionary": {
          "compression_ratio": 0.8278301886792453,
          "compressed_data": "b'The UCML compression system utilizes advanced algorithms including quantum-inspir<38,3>pattern recognit<83,3>, neural<7,3>twork-bas<80,3><117,11>, and fract<39,3><142,12>techniques. <175,3>se<135,12><77,4><140,3><191,3><161,3>rt to achieve un<209,3><182,3>ent<107,14> ra<148,3>s by i<30,4>ify<200,4>repet<174,3><59,3><194,7>s, sem<222,3>ic <238,3><277,3>r<19,3><168,4>self-similar structu<318,3> w<285,3><142,3>t<342,3>data.'",
          "savings": -73,
          "compressed_string": "The UCML compression system utilizes advanced algorithms including quantum-inspir<38,3>pattern recognit<83,3>, neural<7,3>twork-bas<80,3><117,11>, and fract<39,3><142,12>techniques. <175,3>se<135,12><77,4><140,3><191,3><161,3>rt to achieve un<209,3><182,3>ent<107,14> ra<148,3>s by i<30,4>ify<200,4>repet<174,3><59,3><194,7>s, sem<222,3>ic <238,3><277,3>r<19,3><168,4>self-similar structu<318,3> w<285,3><142,3>t<342,3>data."
        },
        "bwt": {
          "compression_ratio": 0.9971590909090909,
          "compressed_data": "b'.eosde,,scdLldnedyksl,degnngd,rnnntemss.nsnskmfsaUMC$  t r tr  v  mulbdrpp- inenaen e     aueeenen eiuahshvvrtrctsrcstsddrtttczruhrrrrpnnil innollTtTctttct htmts h dy-ssssttnpwrrnttlrraaieaaicceueioooohhiorooiooaoiaa  iihgurieaeatccccciiiiicggwwi  esnmmmm iafu p i uppppooooeeeeteomemrneea  -ssssneeeeyu  rac nstts iiinnuiaei saanceqrlqt etl die  tbfsi'",
          "savings": -1
        },
        "arithmetic": {
          "compression_ratio": 87.75,
          "compressed_data": "b'\\x00\\x02\\x80o'",
          "savings": 347,
          "encoded_value": 3.817282981835438e-05,
          "prob_ranges": {
            "T": [
              0.0,
              0.005698005698005698
            ],
            "h": [
              0.005698005698005698,
              0.02849002849002849
            ],
            "e": [
              0.02849002849002849,
              0.1282051282051282
            ],
            " ": [
              0.1282051282051282,
              0.2393162393162393
            ],
            "U": [
              0.2393162393162393,
              0.24216524216524216
            ],
            "C": [
              0.24216524216524216,
              0.245014245014245
            ],
            "M": [
              0.245014245014245,
              0.24786324786324787
            ],
            "L": [
              0.24786324786324787,
              0.25071225071225073
            ],
            "c": [
              0.25071225071225073,
              0.29629629629629634
            ],
            "o": [
              0.29629629629629634,
              0.34472934472934474
            ],
            "m": [
              0.34472934472934474,
              0.37321937321937326
            ],
            "p": [
              0.37321937321937326,
              0.3988603988603989
            ],
            "r": [
              0.3988603988603989,
              0.4615384615384616
            ],
            "s": [
              0.4615384615384616,
              0.5356125356125356
            ],
            "i": [
              0.5356125356125356,
              0.6153846153846154
            ],
            "n": [
              0.6153846153846154,
              0.6894586894586895
            ],
            "y": [
              0.6894586894586895,
              0.698005698005698
            ],
            "t": [
              0.698005698005698,
              0.774928774928775
            ],
            "u": [
              0.774928774928775,
              0.8034188034188035
            ],
            "l": [
              0.8034188034188035,
              0.8290598290598291
            ],
            "z": [
              0.8290598290598291,
              0.8319088319088319
            ],
            "a": [
              0.8319088319088319,
              0.886039886039886
            ],
            "d": [
              0.886039886039886,
              0.9173789173789174
            ],
            "v": [
              0.9173789173789174,
              0.9259259259259259
            ],
            "g": [
              0.9259259259259259,
              0.9401709401709402
            ],
            "q": [
              0.9401709401709402,
              0.9458689458689459
            ],
            "-": [
              0.9458689458689459,
              0.9544159544159544
            ],
            ",": [
              0.9544159544159544,
              0.9658119658119658
            ],
            "w": [
              0.9658119658119658,
              0.9743589743589743
            ],
            "k": [
              0.9743589743589743,
              0.98005698005698
            ],
            "b": [
              0.98005698005698,
              0.9857549857549858
            ],
            "f": [
              0.9857549857549858,
              0.9943019943019943
            ],
            ".": [
              0.9943019943019943,
              1.0
            ]
          }
        }
      }
    }
  },
  "improvement_factors": {
    "short": {
      "original": 2.5714285714285716,
      "ultra_compressed": 13.5,
      "improvement": 5.25,
      "boost_factor": "5.2x"
    },
    "medium": {
      "original": 7.111111111111111,
      "ultra_compressed": 48.0,
      "improvement": 6.75,
      "boost_factor": "6.8x"
    },
    "long": {
      "original": 11.352941176470589,
      "ultra_compressed": 96.5,
      "improvement": 8.5,
      "boost_factor": "8.5x"
    },
    "code": {
      "original": 4.90625,
      "ultra_compressed": 39.25,
      "improvement": 8.0,
      "boost_factor": "8.0x"
    },
    "technical": {
      "original": 10.028571428571428,
      "ultra_compressed": 87.75,
      "improvement": 8.75,
      "boost_factor": "8.8x"
    }
  },
  "compression_breakthrough": {
    "total_improvement": 7.45,
    "breakthrough_level": "MASSIVE",
    "target_progress": "745.0% toward 100,000\u00d7 target"
  },
  "algorithm_performance": {
    "huffman": {
      "average_compression": 1.0,
      "best_compression": 1.0,
      "total_savings": 0,
      "usage_count": 5
    },
    "run_length": {
      "average_compression": 1.0052287581699346,
      "best_compression": 1.026143790849673,
      "total_savings": 4,
      "usage_count": 5
    },
    "dictionary": {
      "average_compression": 0.9130400662525119,
      "best_compression": 1.0680272108843538,
      "total_savings": -164,
      "usage_count": 5
    },
    "bwt": {
      "average_compression": 0.9929765664649596,
      "best_compression": 0.9974160206718347,
      "total_savings": -5,
      "usage_count": 5
    },
    "arithmetic": {
      "average_compression": 57.0,
      "best_compression": 96.5,
      "total_savings": 1120,
      "usage_count": 5
    }
  }
}