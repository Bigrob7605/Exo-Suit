{
  "hash": "2ce822e59f944e1fadaf20eb7aa0a8f4291e856418f11f71a6493f809b9d5944",
  "timestamp": "2025-08-05T18:25:37.505198",
  "domain": "climate",
  "type": "missing_function",
  "code": "import numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport hashlib\nfrom typing import Dict, Any\n\ndef climate_bulletproof_test(data: pd.DataFrame, truth_table: pd.DataFrame) -> Dict[str, Any]:\n    try:\n        # Data quality checks\n        data_quality = _check_data_quality(data)\n        if not data_quality[\"pass\"]:\n            return {\"error\": \"Data quality issues\", \"test_failed\": True}\n\n        # Statistical tests and effect size calculation\n        test_stat, pvalue, _, _, _ = stats.ttest_ind(data['variable'].values, truth_table['truth'].values)\n        effect_size = abs(test_stat) / np.sqrt((data['variance'].sum() + truth_table['variance'].sum()) * 2)\n        power = _calculate_power(data['sample_size'].iloc[0], pvalue, truth_table['variance'].iloc[0])\n\n        # Failure criteria\n        fail_criteria = (pvalue > truth_table['alpha'].iloc[0]) or (effect_size < truth_table['effect_size'].iloc[0])\n\n        return {\n            \"test_name\": \"climate_bulletproof_test\",\n            \"pass_fail\": {\"criteria\": not fail_criteria},\n            \"metrics\": {\"effect_size\": effect_size, \"power\": power},\n            \"evidence\": {\"data_hash\": hashlib.sha256(data.values).hexdigest()}\n        }\n    except Exception as e:\n        return {\"error\": str(e), \"test_failed\": True}\n\ndef _calculate_power(sample_size1, pvalue, variance):\n    z0 = stats.norm.ppf(1 - pvalue / 2)\n    return 1 - stats.norm.cdf((z0 - np.sqrt(2 * sample_size1 * variance * (1 - variance))) / np.sqrt(2 * variance))\n\ndef _check_data_quality(data):\n    nans = data.isnull().sum().max()\n    if nans > 0:\n        return {\"pass\": False, \"message\": f\"{nans} missing values found\"}\n    return {\"pass\": True}",
  "description": "Missing bulletproof test function for climate",
  "status": "pending_review",
  "reviewer": null,
  "approved": false
}